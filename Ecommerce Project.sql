create database ecommerce;
use ecommerce;

select * from customers;
-- 1. List all unique cities where customers are located.
select  distinct(customer_city) as City from customers;

-- 2. Count the number of orders placed in 2017.
select count(order_id) from orders 
where year(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category.
select p.product_category as category, round(sum(pa.payment_value),2) as Sales from products p 
join order_items o on p.product_id = o.product_id
join payments pa on o.order_id = pa.order_id
group by category;

-- 4. Calculate the percentage of orders that were paid in installments.
select sum(case when payment_installments >=1 then 1 else 0 end)/count(0)*100 as Percentage from payments;

-- 5. Count the number of customers from each state.
select customer_state,count(customer_id) as total_count from customers
group by customer_state;

-- 6. Calculate the number of orders per month in 2018.
select monthname(order_purchase_timestamp) as Month,count(order_id) as "Total Orders" from orders 
where year(order_purchase_timestamp) = 2018
group by Month ;

-- 7. Find the average number of products per order, grouped by customer city.
with count_per_order as (select orders.order_id as order_id,orders.customer_id as customer_id,count(order_items.order_id) as order_counts
from orders join order_items 
on orders.order_id = order_items.order_id
group by orders.order_id,orders.customer_id)

select customers.customer_city,round(avg(count_per_order.order_counts),2) as avg_orders from customers 
join count_per_order on customers.customer_id = count_per_order.customer_id
group by customers.customer_city;

-- 8. Calculate the percentage of total revenue contributed by each product category.
select p.product_category as category, 
round((sum(pa.payment_value)/(select sum(payment_value) from payments))*100,2) as "percentage Distribution"
from products p 
join order_items o on p.product_id = o.product_id
join payments pa on o.order_id = pa.order_id
group by category
order by "percentage Distribution" desc;

-- 9. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category as Category,
count(order_items.product_id) as "Total Counts",
round(avg(Order_items.price),2) as "Average Price" 
from Products 
join Order_items on products.product_id = Order_items.product_id
group by Category ;

-- 10. Calculate the total revenue generated by each seller, and rank them by revenue.
select *,dense_rank() over(order by revenue desc) as "Rank" from 
(select order_items.seller_id,sum(payments.payment_value) as Revenue from order_items 
join payments on order_items.order_id = payments.order_id
group by order_items.seller_id) as a;

-- 11. Calculate the moving average of order values for each customer over their order history.
select customer_id,order_purchase_timestamp,payments,
avg(payments) over(partition by customer_id order by order_purchase_timestamp rows between 2 preceding and current row) as mov_avg from
(select orders.customer_id ,orders.order_purchase_timestamp,payments.payment_value as payments from payments 
join orders on payments.order_id = orders.order_id) as a;

-- 12. Calculate the cumulative sales per month for each year.
select years,months,payments,
sum(payments) over(order by years,months)  as cum_Sales from
(select year(orders.order_purchase_timestamp) as years,
month(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as payments from orders
join payments on orders.order_id = payments.order_id
group by years,months 
order by years,months) as a;

-- 13. Calculate the year-over-year growth rate of total sales.
with a as(select year(orders.order_purchase_timestamp) as years,
round(sum(payments.payment_value),2) as payments from orders
join payments on orders.order_id = payments.order_id
group by years 
order by years)
select years,payments,lag(payments,1) over(order by years) as previous_year,
round(((payments-lag(payments,1) over(order by years))/lag(payments,1) over(order by years))*100,2) as "Growth rate" from a;


-- 14. Identify the top 3 customers who spent the most money in each year.

select years,customer_id,payment,d_rank from
(select year(orders.order_purchase_timestamp) as years,orders.customer_id,sum(payments.payment_value) as payment,
dense_rank() over (partition by year(orders.order_purchase_timestamp) order by sum(payments.payment_value) desc) d_rank	
from orders join payments
on orders.order_id = payments.order_id 
group by years,orders.customer_id) as a
where d_rank <=3;




